// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  rollNumber  String
  name        String
  email       String     @unique
  branch      String
  batch       Int
  role        Role       @default(BTech)
  canRequest  Boolean    @default(false)
  noDuesGiven Boolean    @default(false)
  fines       Fines[]    @relation("Fines")
  requests    Requests[] @relation("Requests")

  @@id([rollNumber, email])
}

enum Role {
  BTech
  MTech
  PhD
}

model Department {
  deptId      String     @id
  username    String     @unique
  autoApprove Boolean    @default(false)
  pswdDept    String 
  fines       Fines[]    @relation("Fines")
  requests    Requests[] @relation("Requests")
}

model Fines {
  fineId            String     @id @default(uuid())
  Student           Student    @relation("Fines", fields: [studentRollNumber, studentEmail], references: [rollNumber, email])
  studentRollNumber String
  studentEmail      String
  Department        Department @relation("Fines", fields: [departmentDeptId], references: [deptId])
  departmentDeptId  String
  dateOfCreation    DateTime   @default(now())
  amount            Int        @default(0)
  deadline          DateTime
  reason            String     @db.VarChar(300)
  damageProof       String?
  status            Status     @default(Outstanding)
  paymentOfFine     Payments[]
}

enum Status {
  Approved
  Pending
  Rejected
  Outstanding
}

model Requests {
  requestId         String     @id @default(uuid())
  student           Student    @relation("Requests", fields: [studentRollNumber, studentEmail], references: [rollNumber, email])
  studentRollNumber String
  studentEmail      String
  Department        Department @relation("Requests", fields: [departmentDeptId], references: [deptId])
  departmentDeptId  String
  dateOfRequest     DateTime   @default(now())
  isApproved        Boolean    @default(false)
  dateOfApproval    DateTime
}

model Payments {
  paymentId     String   @id @default(uuid())
  paymentProof  String
  dateOfPayment DateTime @default(now())
  Fines         Fines    @relation(fields: [finesFineId], references: [fineId])
  finesFineId   String
}

model Admin {
  adminId      String  @id @default(uuid())
  username     String  @unique
  pswdAdmin    String
  isSuperAdmin Boolean @default(false)
}
